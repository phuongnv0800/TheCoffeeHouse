@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@attribute [Authorize]
<PageTitle>Quản lý The Coffee House</PageTitle>

<Layout>
    if (authState.User.Identity.IsAuthenticated){
        <Aside>
            <AsideBrand Logo="" Class="px-4">
                <span class="text-primary fw-bolder fs-6 lh-base ms-2">The Coffee House</span>
            </AsideBrand>

            <AsideMenu>
                <NavMenu />
            </AsideMenu>

            <AsideFooter FullName=@Name Description=@Des Image="assets/media/avatars/300-1.jpg" />
        </Aside>
    }
    <Page Logo="">
        <Mobile>
            <span class="text-primary fw-bolder fs-6 lh-base ms-2">The Coffee House</span>
        </Mobile>
        <Content>
            @Body
        </Content>
    </Page>
</Layout>

<Overlay />
@code{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    public string Name { get; set; }
    public List<string> Roles { get; set; } = new();
    public string Des { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;        
        Roles = new();
        if (authState.User.Identity.IsAuthenticated)
        {
            Name = authState.User.FindFirst(x => x.Type == ClaimTypes.GivenName)!.Value;
            Roles = authState.User.FindAll(x => x.Type == ClaimTypes.Role).Select(x => x.Value).ToList();
            if (Roles.Contains(Permission.Branch))
            {
                Des = "Quản lý chuỗi cửa hàng";
            }
            else if (Roles.Contains(Permission.Manage))
            {
                Des = "Quản lý cửa hàng";
            }
            else if (Roles.Contains(Permission.Staff))
            {
                Des = "Nhân viên";
            }
            else if (Roles.Contains(Permission.Customer))
            {
                Des = "Khách hàng";
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
<BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.TopRight"
                Timeout="2"
                IconType="IconType.FontAwesome"
                InfoClass="alert alert-dismissible bg-light-primary border border-primary border-dashed text-primary show"
                InfoIcon="far fa-lightbulb text-primary fs-3"
                SuccessClass="alert alert-dismissible bg-light-success border border-success border-dashed text-light show"
                SuccessIcon="far fa-solid fa-bell text-success fs-3"
                WarningClass="alert alert-dismissible bg-light-warning border border-warning border-dashed text-light show"
                WarningIcon="fas fa-exclamation-triangle text-warning fs-3"
                ErrorClass="alert alert-dismissible bg-light-danger border border-danger border-dashed text-light show"
                ErrorIcon="fas fa-times text-danger fs-3" />