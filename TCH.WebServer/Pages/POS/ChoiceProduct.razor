@inject IProductService productService
@inject IConfiguration Configuration
<div class="modal fade show d-block" tabindex="-1" role="dialog">
<div class="modal-backdrop fade show" @onclick="OnCancel"></div>
<div class="modal-dialog modal-dialog-centered" style="z-index: 1050; max-width: 90% !important;">
<div class="modal-content">
<div class="modal-header">
    <h5 class="fw-bolder">@Title</h5>
    <div class="btn btn-icon btn-sm btn-active-icon-primary" @onclick="OnCancel">
        <span class="svg-icon svg-icon-1">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black"/>
                <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black"/>
            </svg>
        </span>
    </div>
</div>
<div class="modal-body">
<div class="scroll-y">
@if (order != null && product != null && orderDetail != null)
{
    <div class="row">
    <div class="col-lg-6 col-xxl-4">
        <!--begin::Card-->
        <div class="card ">
            <!--begin::Card body-->
            <div class="card-body p-9">
                <a class="d-block overlay" data-fslightbox="lightbox-hot-sales" target="_blank" href="@(Configuration["BackendApiUrl"] + "/Uploads/" + product.LinkImage)">
                    <!--begin::Image-->
                    <div class="overlay-wrapper bgi-no-repeat bgi-position-center bgi-size-cover card-rounded " style="min-height: 250px;background-image:url(@(Configuration["BackendApiUrl"] + "/Uploads/" + product.LinkImage))"></div>
                    <!--end::Image-->
                    <!--begin::Action-->
                    <div class="overlay-layer card-rounded bg-dark bg-opacity-25">
                        <i class="bi bi-eye-fill fs-2x text-white"></i>
                    </div>
                    <!--end::Action-->
                </a>
            </div>
            <!--end::Card body-->
        </div>
        <!--end::Card-->
    </div>
    <div class="col-lg-6 col-xxl-4">
        <!--begin::Budget-->
        <div class="card ">
            <div class="card-body p-9">
                <div class="fs-2hx fw-bolder">@product.Name</div>
                <div class="fs-4 fw-bold text-gray-400 mb-7">@String.Format("{0:0,0 vnđ}", product.Price)</div>
                @if (product.Sizes != null)
                {
                    foreach (var size in product.Sizes)
                    {
                        <div class="separator separator-dashed"></div>
                        <div class="fs-6 d-flex justify-content-between my-4">
                            <div class="fw-bold">@size.Name</div>
                            <div class="d-flex fw-bolder">
                                @(size.SubPrice == 0 ? "0" : $"{size.SubPrice:0,0 vnđ}")
                            </div>
                            <button class="btn btn-outline-primary" style="" onclick="@(() => PickSize(size.ID, size.Name))">+</button>
                        </div>
                    }
                }
            </div>
        </div>
        <!--end::Budget-->
    </div>
    @if (product.Toppings != null && product.Toppings.Count != 0)
    {
        <div class="col-lg-6 col-xxl-4" style="height:400px; overflow: scroll; background: white">
            <div class="dataTables_scrollBody border p-3 rounded" style="position: relative; overflow: auto; max-height: 400px; width: 100%;">
                <table class="table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer" id="kt_ecommerce_edit_order_product_table" style="width: 100%;">
                    <thead>
                    <tr class="text-start text-gray-400 fw-bolder fs-7 text-uppercase gs-0" style="height: 1px;">
                        <th class="w-25px pe-2 sorting_disabled" rowspan="1" colspan="1" style="width: 24.9844px; padding-top: 0px; padding-bottom: 0px; border-top-width: 0px; border-bottom-width: 0px; height: 0px;">
                            <div class="dataTables_sizing" ></div>
                        </th>
                        <th class="min-w-200px sorting" aria-controls="kt_ecommerce_edit_order_product_table" rowspan="1" colspan="1" style="width: 362.938px; padding-top: 0px; padding-bottom: 0px; border-top-width: 0px; border-bottom-width: 0px; height: 0px;">
                            <div class="dataTables_sizing" >Chọn toppings</div>
                        </th>
                    </tr>
                    </thead>
                    <tbody class="fw-bold text-gray-600">

                    @foreach (var topping in product.Toppings)
                    {
                        <tr class="odd">
                            <td>
                                <div class="form-check form-check-sm form-check-custom form-check-solid">
                                    <input class="form-check-input" type="checkbox" @onchange="@(e => { AddTopping(@topping.ID, topping.SubPrice, topping.Name, e.Value); })">
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center" data-kt-ecommerce-edit-order-filter="product" data-kt-ecommerce-edit-order-id="product_1">

                                    <div class="ms-5">
                                        <!--begin::Title-->
                                        <a class="text-gray-800 text-hover-primary fs-5 fw-bolder">@topping.Name</a>
                                        <!--end::Title-->
                                        <!--begin::Price-->
                                        <div class="fw-bold fs-7">
                                            Giá:
                                            <span data-kt-ecommerce-edit-order-filter="price">@String.Format("{0:0,0 vnđ}", topping.SubPrice)</span>
                                        </div>
                                        <!--end::Price-->
                                    </div>
                                </div>
                            </td>
                            <!--end::Product=-->
                        </tr>
                    }
                    </tbody>
                    <!--end::Table body-->
                </table>
            </div>
        </div>
    }
    <div class="col-lg-6 col-xxl-4">
        <EditForm Model="orderDetail">
            <div class="mb-10 fv-row fv-plugins-icon-container">
                <!--begin::Label-->
                <label class="required form-label">Lượng Đá</label>
                <!--end::Label-->
                <!--begin::Input-->
                <InputSelect @bind-Value="orderDetail.IcedType" class="form-control">
                    @foreach (var ice in Enum.GetValues(typeof(IcedType)))
                    {
                        switch (ice)
                        {
                            case IcedType.ZeroPercent:
                                <option value="@ice">0%</option>
                                break;
                            case IcedType.TwentyFivePercent:
                                <option value="@ice">25%</option>
                                break;
                            case IcedType.FiftyPercent:
                                <option value="@ice">50%</option>
                                break;
                            case IcedType.SeventyFivePercent:
                                <option value="@ice">75%</option>
                                break;
                            case IcedType.OneHundredPercent:
                                <option value="@ice">100%</option>
                                break;
                        }
                    }
                </InputSelect>
                <!--end::Input-->
            </div>
            <div class="mb-10 fv-row fv-plugins-icon-container">
                <!--begin::Label-->
                <label class="required form-label">Lượng đường</label>
                <!--end::Label-->
                <!--begin::Input-->
                <InputSelect @bind-Value="orderDetail.SugarType" class="form-control">
                    @foreach (var sugar in Enum.GetValues(typeof(SugarType)))
                    {
                        switch (sugar)
                        {
                            case SugarType.ZeroPercent:
                                <option value="@sugar">0%</option>
                                break;
                            case SugarType.TwentyFivePercent:
                                <option value="@sugar">25%</option>
                                break;
                            case SugarType.FiftyPercent:
                                <option value="@sugar">50%</option>
                                break;
                            case SugarType.SeventyFivePercent:
                                <option value="@sugar">75%</option>
                                break;
                            case SugarType.OneHundredPercent:
                                <option value="@sugar">100%</option>
                                break;
                        }
                    }
                </InputSelect>
                <!--end::Input-->
            </div>
            <div class="mb-10 fv-row fv-plugins-icon-container">
                <!--begin::Label-->
                <label class="required form-label required">Số lượng</label>
                <!--end::Label-->
                <!--begin::Input-->
                <InputNumber @bind-Value="orderDetail.Quantity" class="form-control"/>
                <!--end::Input-->
            </div>
        </EditForm>

    </div>
    <div class="col-lg-6 col-xxl-4">
        <div class="card card-flush mb-xxl-10 mt-5">
            <!--begin::Header-->
            <div class="card-header pt-5">
                <!--begin::Title-->
                <h3 class="card-title align-items-start flex-column">
                    <span class="card-label fw-bolder text-dark">@product.Name (+ @orderDetail.SizeName)</span>
                    <span class="text-gray-400 pt-2 fw-bold fs-6">
                        đường:
                        @switch (orderDetail.SugarType)
                        {
                            case SugarType.ZeroPercent:
                                <span>0%</span>
                                break;
                            case SugarType.TwentyFivePercent:
                                <span >25%</span>
                                break;
                            case SugarType.FiftyPercent:
                                <span >50%</span>
                                break;
                            case SugarType.SeventyFivePercent:
                                <span >75%</span>
                                break;
                            case SugarType.OneHundredPercent:
                                <span >100%</span>
                                break;
                        }
                    </span>
                    <span class="text-gray-400 pt-2 fw-bold fs-6">
                        đá:
                        @switch (orderDetail.IcedType)
                        {
                            case IcedType.ZeroPercent:
                                <span>0%</span>
                                break;
                            case IcedType.TwentyFivePercent:
                                <span >25%</span>
                                break;
                            case IcedType.FiftyPercent:
                                <span >50%</span>
                                break;
                            case IcedType.SeventyFivePercent:
                                <span >75%</span>
                                break;
                            case IcedType.OneHundredPercent:
                                <span >100%</span>
                                break;
                        }
                    </span>
                </h3>
                <!--end::Title-->
            </div>
            <!--end::Header-->
            @if (orderDetail.Toppings != null && orderDetail.Toppings.Count != 0) 
            {
                <!--begin::Body-->
                <div class="card-body">
                    <!--begin::Tab Content-->
                    <div class="tab-content">
                        <!--begin::Tap pane-->
                        <div class="" id="kt_stats_widget_1_tab_2">
                            <!--begin::Table container-->
                            <div class="table-responsive">
                                <!--begin::Table-->
                                <table class="table align-middle gs-0 gy-4 my-0">
                                    <!--begin::Table head-->
                                    <thead>
                                    <tr class="fs-7 fw-bolder text-gray-500">
                                        <th class="p-0 min-w-150px d-block pt-3">Tên</th>
                                        <th class="pe-0 min-w-120px pt-3">Số lượng</th>
                                        <th class="pe-0 text-end min-w-120px pt-3">Giá</th>
                                    </tr>
                                    </thead>
                                    <!--end::Table head-->
                                    <!--begin::Table body-->
                                    <tbody>

                                    @foreach (var topping in orderDetail.Toppings)
                                    {
                                        <tr>
                                            <td>
                                                <a class="text-gray-800 fw-bolder text-hover-primary mb-1 fs-6">@topping.Name </a>
                                            </td>
                                            <td>
                                                <a class="text-gray-800 fw-bolder text-hover-primary mb-1 fs-6">@topping.Quantity </a>
                                            </td>
                                            <td class="text-end">
                                                <span class="text-gray-800 fw-bolder d-block fs-6">@($"{topping.SubPrice:0,0 vnđ}")</span>
                                            </td>
                                        </tr>
                                    }

                                    </tbody>
                                    <!--end::Table body-->
                                </table>
                            </div>
                            <!--end::Table container-->
                        </div>
                        <!--end::Tap pane-->
                    </div>
                    <!--end::Tab Content-->
                </div>
            }
            <!--end: Card Body-->
        </div>
    </div>
    </div>
}
<div class="d-flex justify-content-end">
    <!--begin::Button-->
    <button @onclick="OnCancel" class="btn btn-light me-5">Hủy</button>
    <!--end::Button-->
    <!--begin::Button-->
    <button type="submit" class="btn btn-primary" onclick="@OnSubmit">
        <span class="indicator-label">Thêm</span>
    </button>
    <!--end::Button-->
</div>
</div>
</div>
</div>
</div>
</div>


@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string ProductId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    private string Url;
    private OrderRequest order;
    private ProductVm product;
    private OrderItem orderDetail;
    private List<OrderToppingItem> toppings = new ();
    private int quantity;
    private string SizePro = "S";
    private string icePick = "0%";
    private string sugarPick = "0%";

    protected override async Task OnInitializedAsync()
    {
        Url = Configuration.GetSection("BackendApiUrl").Value;
        var responseProduct = await productService.GetProductById(ProductId);
        product = responseProduct.Data;
        if (GbParameter.GbParameter.Order == null)
        {
            order = new OrderRequest();
            order.OrderItems = new List<OrderItem>();
        }
        else order = GbParameter.GbParameter.Order;
        orderDetail = new OrderItem()
        {
            ProductID = ProductId,
            SizeID = product.Sizes[0].ID,
            Quantity = 1,
            PriceProduct = product.Price,
            PriceSize = product.Sizes[0].SubPrice,
            SizeName = product.Sizes[0].Name,
            NameProduct = product.Name,
            SubAmount = product.Price,
        };
    }

    private async Task OnCancel() => await BlazoredModal.CancelAsync();

    public async Task AddTopping(string toppingId, double subPrice, string name, object checkedValue)
    {
        if ((bool) checkedValue)
        {
            var topping = new OrderToppingItem()
            {
                Name = name,
                ToppingID = toppingId,
                Quantity = 1,
                SubPrice = subPrice
            };
            toppings.Add(topping);
            orderDetail.Toppings = toppings;
            orderDetail.SubAmount += subPrice;
        }
        else
        {
            var topping = toppings.FirstOrDefault(x => x.ToppingID == toppingId);
            if (topping != null)
            {
                toppings.Remove(topping);
                orderDetail.Toppings = toppings;
                orderDetail.SubAmount -= subPrice;
            }
        }
        StateHasChanged();
    }

    public async Task PickSize(string size, string name)
    {
        orderDetail.SizeID = size;
        orderDetail.SizeName = name;
        var sizes = await productService.GetSizes();
        foreach (Size si in sizes.Items)
        {
            if (si.ID == size)
            {
                orderDetail.SubAmount -= orderDetail.PriceSize;
                orderDetail.PriceSize = si.SubPrice;
                orderDetail.SubAmount += si.SubPrice;
                SizePro = si.Name;
                StateHasChanged();
                break;
            }
        }
    }

    public async Task OnSubmit()
    {
        orderDetail.Toppings = toppings;
        orderDetail.SubAmount *= orderDetail.Quantity;
        order.OrderItems.Add(orderDetail);
        GbParameter.GbParameter.Order = order;
    // navigationNavigation.NavigateTo("/dashboard");
        await BlazoredModal.CloseAsync(ModalResult.Ok(true));
    }
    } 