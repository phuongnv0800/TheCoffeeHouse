@page "/dashboard"
@using TCH.WebServer.Pages.POS.Customers
@inject NavigationManager navigationManager
@inject IProductService productServices
@inject IUserService userServices
@inject ICategoryService categoryServices
@inject NavigationManager NavManager
@inject IToastService toastService
@inject IOrderService orderService
@inject IConfiguration Configuration
@inject IUserApiClient userApiClient;
@attribute [Authorize]

<div class="page d-flex flex-row flex-column-fluid">
    <div class="wrapper d-flex flex-column flex-row-fluid" id="kt_wrapper">

        <div class="content d-flex flex-column flex-column-fluid" id="kt_content">
            <div class="row g-5 g-xl-8" style="margin-top: 30px">
                <div class=" d-flex mt-2">
                    <EditForm Model="searchText" OnValidSubmit="SearchByText">
                        <InputText @bind-Value="searchText" type="text" data-kt-ecommerce-category-filter="search" class="form-control form-control-solid w-250px ps-14" placeholder="Tìm kiếm loại sản phẩm"/>
                    </EditForm>
                    <button class="ms-5 btn btn-primary" onclick="@(() => CreateOrder())">Xem đơn hàng</button>
                </div>

                <div class="row">
                    @if (ProductsList != null && ProductsList.Count != 0)
                    {
                        foreach (var product in ProductsList)
                        {
                            <div class="col-md-6 col-lg-4 col-sm-12 p-5">
                                <!--begin::Hot sales post-->
                                <div class="card-xl-stretch me-md-6">
                                    <!--begin::Overlay-->
                                    <a class="d-block overlay" data-fslightbox="lightbox-hot-sales" href="@(Configuration["BackendApiUrl"] + "/Uploads" + product.LinkImage)" target="_blank">
                                        <!--begin::Image-->
                                        <div class="overlay-wrapper bgi-no-repeat bgi-position-center bgi-size-cover card-rounded min-h-175px" style="background-image:url(@(Configuration["BackendApiUrl"] + "/Uploads" + product.LinkImage))"></div>
                                        <!--end::Image-->
                                        <!--begin::Action-->
                                        <div class="overlay-layer card-rounded bg-dark bg-opacity-25">
                                            <i class="bi bi-eye-fill fs-2x text-white"></i>
                                        </div>
                                        <!--end::Action-->
                                    </a>
                                    <!--end::Overlay-->
                                    <!--begin::Body-->
                                    <div class="mt-5">
                                        <!--begin::Title-->
                                        <a href="/product-detail/@product.ID" class="text-primary fw-bolder text-hover-primary text-dark lh-base">@product.Name</a>
                                        <!--end::Title-->
                                        <!--begin::Text-->
                                        <a class="fw-bold text-gray-600 text-dark mt-3 d-block" href="/recipes/@product.ID">Xem công thức</a>
                                        <!--end::Text-->
                                        <!--begin::Text-->
                                        <div class="fs-6 fw-bolder mt-5 d-flex flex-stack">
                                            <!--begin::Label-->
                                            @if (!product.IsAvailable)
                                            {
                                                <span class="badge badge-danger border-dashed text-primary p-2">
                                                    Hết hàng
                                                </span>
                                            }
                                            <span class="badge border border-dashed text-primary p-2 fs-1">
                                                @String.Format("{0:0,0 vnđ}", (product.IsSale) ? product.Price - product.PriceSale : product.Price)
                                            </span>
                                            <!--end::Label-->
                                            <!--begin::Action-->
                                            @* <button onclick="@(() => NavManager.NavigateTo($"/product-detail/{@product.ID}"))" class="btn btn-sm btn-primary">Mua</button> *@
                                            <button onclick="@(() => OnNew(@product.ID))" class="btn btn-sm btn-primary">Mua</button>
                                        </div>
                                        <!--end::Text-->
                                    </div>
                                    <!--end::Body-->
                                </div>
                                <!--end::Hot sales post-->
                            </div>
                        }
                    }
                    else
                    {
                        <Loading></Loading>
                    }
                </div>

            </div>
        </div>
    </div>
</div>

<div class="col-sm-10 col-md-9 d-flex">
    <div class="row w-100">
        <div class="col-sm-12 col-md-2 d-flex align-items-center justify-content-start justify-content-md-start">
            <div class="dataTables_length" id="kt_ecommerce_category_table_length">
                <label>
                    <EditForm Model="pagination">
                        <InputSelect @bind-Value="pagination.pageSize" name="kt_ecommerce_category_table_length" aria-controls="kt_ecommerce_category_table" class="form-select form-select-sm form-select-solid">
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </InputSelect>
                    </EditForm>
                </label>
            </div>
        </div>
        <div class="col-sm-12 col-md-10">
            <Pagination Count="@(pagination.totalPage)" SelectedChanged="Change"/>
        </div>
    </div>
</div>


@code {
    public List<ProductVm>? ProductsList = new();


    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    [CascadingParameter]
    public IModalService Modal { get; set; }

    [Parameter]
    public string BranchId { get; set; }

    private string Url;
    private Models.Pagination.Pagination pagination = new();
    private List<Category> categories = new();
    private string branchId;
    private OrderRequest order;
    private string searchText = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Url = Configuration.GetSection("BackendApiUrl").Value;
            var authState = await AuthenticationState;
            pagination.pageSize = 9;
            if (authState.User.Identity!.IsAuthenticated)
            {
                BranchId = authState.User.FindFirst(x => x.Type == ClaimValue.BranhID)!.Value;
            }
            await Get(1);

        }
        catch (Exception e)
        {
            toastService.ShowError("có lỗi");
        }
    }
    private async Task OnNew(string productId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ChoiceProduct.Title), "Thêm món");
        parameters.Add(nameof(ChoiceProduct.ProductId), productId);

        var modal = Modal.Show<ChoiceProduct>(string.Empty, parameters, options: new ModalOptions
        {
            UseCustomLayout = true
        });

        var result = await modal.Result;
        if (!result.Cancelled)
        {
            await Get(1);
        }
        
    }
    public async Task Get(int pageNumber)
    {
        var response = await productServices.GetProductsByBranch(true, pagination.pageSize, pageNumber, BranchId, searchText);
    //var response = await productServices.GetProducts(true, pagination.pageSize, pageNumber);
        pagination.PageNumber = response.Data.CurrentPage;
        ProductsList = response.Data.Items.ToList();
        pagination.totalPage = response.Data.TotalPages;
        StateHasChanged();
    }

    public async void Change(int link)
    {
        pagination.PageNumber = link;
        await Get(link);
        StateHasChanged();
    }

    public async void CreateOrder()
    {
        Modal.Show<OrderDetailComponent>("Đơn hàng đang đặt", options: new ModalOptions
        {
            UseCustomLayout = true
        });
    }

    public async void OnSubmit()
    {
        navigationManager.NavigateTo($"/invoice");
    }

    public async Task SearchByText()
    {
        await Get(pagination.PageNumber);
    }

}