@page "/recipes/{ProductId}"
@using TCH.Data.Entities
@using TCH.WebServer.Services.Orders
@using TCH.WebServer.Services.Products
@using TCH.WebServer.Services.Recipes
@using TCH.ViewModel.RequestModel;
@using TCH.ViewModel.SubModels;

@inject IOrderService orderService
@inject IProductService productService
@inject NavigationManager navigationNavigation
@inject IToastService toastService
@inject IRecipeService recipeService
@inject IConfiguration Configuration
@attribute [Authorize]

<div class="page d-flex flex-row flex-column-fluid">
    <div class="wrapper d-flex flex-column flex-row-fluid" id="kt_wrapper">

        <div class="content d-flex flex-column flex-column-fluid" id="kt_content">
            @if (recipes != null && recipes.Count() > 0 && product != null)
            {
                <div class="d-flex flex-column flex-column-fluid container-fluid" style="">
                    <!--begin::Post-->
                <div class="content flex-column-fluid" id="kt_content">
                        <!--begin::Stats-->
                    <div class="row g-6 g-xl-9">
                            <div class="col-lg-6 col-xxl-4">
                                <!--begin::Card-->
                            <div class="card ">
                                    <!--begin::Card body-->
                                <div class="card-body p-9">
                                     <a class="d-block overlay" data-fslightbox="lightbox-hot-sales" href="@(Configuration["BackendApiUrl"]+"/Uploads/" + recipes.First().Product.LinkImage)">
                                            <!--begin::Image-->
                                        <div class="overlay-wrapper bgi-no-repeat bgi-position-center bgi-size-cover card-rounded " style="min-height: 250px;background-image:url(@(Configuration["BackendApiUrl"]+"/Uploads/" + recipes.First().Product.LinkImage))"></div>
                                            <!--end::Image-->
                                            <!--begin::Action-->
                                        <div class="overlay-layer card-rounded bg-dark bg-opacity-25">
                                                <i class="bi bi-eye-fill fs-2x text-white"></i>
                                            </div>
                                            <!--end::Action-->
                                    </a>
                                    <div class="fs-2hx fw-bolder">@recipes.First().Product.Price</div>
                                    <div class="fs-4 fw-bold text-gray-400 mb-7">@recipes.First().Product.Name</div>

                                 </div>
                                 
                                    <!--end::Card body-->
                            </div>
                                <!--end::Card-->
                        </div>
                        </div>

                        <div class="row mt-2">
                            @foreach (var recipe in recipes)
                            {
                                <div class="col-lg-6 col-xxl-4 mt-2">
                                    <!--begin::Budget-->
                                    <div class="card ">
                                        <div class="card-body p-9">
                                            
                                            <div class="separator separator-dashed"></div>
                                            <div class="fs-6 d-flex justify-content-between my-4">
                                                <div class="fw-bold">Size: @recipe.Size.Name</div>
                                            </div>

                                            <div class="separator separator-dashed"></div>
                                            <div class="fs-6 d-flex justify-content-between my-4">
                                                <div class="fw-bold">Nguyên liệu: @recipe.Material.Name</div>
                                            </div>

                                            <div class="separator separator-dashed"></div>
                                            <div class="fs-6 d-flex justify-content-between my-4">
                                                <div class="fw-bold">Đơn vị: @recipe.Unit</div>
                                            </div>

                                            <div class="separator separator-dashed"></div>
                                            <div class="fs-6 d-flex justify-content-between my-4">
                                                <div class="fw-bold">Định lượng: @recipe.Weight</div>
                                            </div>
                                        </div>
                                    </div>
                                    <!--end::Budget-->
                        </div>
                            }
                        </div>

                    </div>
                </div>
            }
        </div>
        <div class="d-flex justify-content-end">
            <!--begin::Button-->
            <a href="/dashboard" id="kt_ecommerce_add_product_cancel" class="btn btn-light me-5">Cancel</a>
            <!--end::Button-->

        </div>
    </div>
</div>

@code {
    [Parameter] public string ProductId { get; set; }
    private string Url;
    private IEnumerable<RecipeDetail> recipes = null;
    private List<RecipeRequest> request = new List<RecipeRequest>();
    private ProductVm product = new ProductVm();
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Url = Configuration.GetSection("BackendApiUrl").Value;
            var responseProduct = await productService.GetProductById(ProductId);
            product = responseProduct.Data;

            var response = await recipeService.GetAllRecipeByProductId(ProductId);
            if (response.Result != 1)
            {
                toastService.ShowError(response.Message);
                return;
            }
            recipes = response.Data;
            base.OnParametersSet();
        }
        catch
        {
            toastService.ShowError("có lỗi");
        }
    }
    private async Task Add()
    {
        var response = await recipeService.AddRecipe(request);
    }
}
