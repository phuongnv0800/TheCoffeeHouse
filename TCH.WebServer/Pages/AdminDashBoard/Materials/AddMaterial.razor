@page "/add-material"
@using TCH.Data.Entities
@using TCH.WebServer.Models
@using TCH.WebServer.Services.Brands
@using TCH.WebServer.Services.Categories
@using TCH.WebServer.Services.Materials

@inject ICategoryService _categoryService
@inject IMaterialService _materialService
@inject IToastService _toastService

<TCH.WebServer.Shared.Header.Header ></TCH.WebServer.Shared.Header.Header>
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="OnCancel"></div>
    <div class="modal-dialog modal-dialog-centered mw-650px" style="z-index: 1050">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="fw-bolder">@Title</h5>
                <div class="btn btn-icon btn-sm btn-active-icon-primary" @onclick="OnCancel">
                    <span class="svg-icon svg-icon-1">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
							<rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
							<rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
						</svg>
					</span>
                </div>
            </div>
            <div class="modal-body">
                <div class="scroll-y me-n7 pe-7">
                    <EditForm Model="editMaterial" OnValidSubmit="OnSubmit" class="form">
                        <DataAnnotationsValidator />
                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Tên nguyên liệu</label>
                            <InputText @bind-Value="editMaterial.Name" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editMaterial.Name)" />
                            </div>
						</div>


                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Mô tả nguyên liệu</label>
                            <InputText @bind-Value="editMaterial.Description" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editMaterial.Description)" />
                            </div>
						</div>

                        <div class="fv-row mb-7">
							<label class="fs-6 fw-bold mb-2 requied">Chọn loại sản phẩm</label>
                            <InputSelect @bind-Value="editMaterial.MaterialTypeID" class="form-control">
                                @if (types != null)
                                {
                                    @foreach (var dept in types)
                                    {
                                        <option value="@dept.ID">@dept.Name</option>
                                    }
                                }

                            </InputSelect>
						</div>
                        
                        <div class="fv-row mb-7">
							<label class="fs-6 fw-bold mb-2">Hình ảnh</label>
                            <InputFile OnChange="HandleSelection"></InputFile>
						</div>
                        
                        <div class="card-footer p-2">
                            <button type="submit" class="btn btn-primary mr-2" onclick="@(()=>OnSubmit())">Cập nhật</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public string? MaterialId { get; set; }

    private List<MaterialType> types = new List<MaterialType>();
    private Material editMaterial = null;

    protected async override Task OnInitializedAsync()
    {
        editMaterial = new Material();
        var responseType = await _materialService.GetMaterialTypes();
        types = responseType.Data.Items;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(MaterialId))
        {
            editMaterial = new Material();
        }
        else
        {
            var responseP = await _materialService.GetMaterialById(MaterialId);
            var vesselDB = responseP.Data;
            editMaterial.Name = vesselDB.Name;
            editMaterial.Description = vesselDB.Description;
            editMaterial.LinkImage = vesselDB.LinkImage;
            editMaterial.MaterialTypeID = vesselDB.MaterialTypeID;
            editMaterial.MaterialType = vesselDB.MaterialType;
        }
    }
}


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    private async Task OnCancel() => await BlazoredModal.CancelAsync();

    private MultipartFormDataContent content = new MultipartFormDataContent();
    private async Task OnSubmit()
    {
        try{
            ResponseLogin<Material> response = new ResponseLogin<Material>();
            content.Add(new StringContent(editMaterial.Name), "Name");
            content.Add(new StringContent(editMaterial.Description), "Description");
            content.Add(new StringContent(editMaterial.MaterialTypeID), "MaterialTypeID");
            content.Add(new StringContent(editMaterial.MaterialType.ToString()), "MaterialType");
            
            if (string.IsNullOrEmpty(MaterialId))
            {
                response = await _materialService.AddMaterial(content);
            }
            else
            {
                response = await _materialService.UpdateMaterial(content);
            }
            if(response != null)
            {
                if(response.Result == 1)
                {
                    _toastService.ShowSuccess("Thêm thành công");
                    await BlazoredModal.CloseAsync(ModalResult.Ok(true));
                }
            }
        }
        catch(Exception ex)
        {
            _toastService.ShowError(ex.ToString());
        }
    }
    private async Task HandleSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        long maxFileSize = 2048 * 512;
        try
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            content.Add(fileContent, "file", file.Name);
            // _systemService.Download(content);
            // editVessel.File = file.Name;
            _toastService.ShowSuccess("Chọn ảnh thành công");
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.ToString());
        }
    }
}

