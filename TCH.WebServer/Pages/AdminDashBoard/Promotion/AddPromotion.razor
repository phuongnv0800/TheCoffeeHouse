@page "/add-promotion"
@using TCH.Data.Entities
@using TCH.Utilities.Enum
@using TCH.ViewModel.SubModels
@using TCH.WebServer.Models
@using TCH.WebServer.Services.Brands
@using TCH.WebServer.Services.Categories
@using TCH.WebServer.Services.Promotions

@inject ICategoryService _categoryService
@inject IPromotionService _promotionService
@inject IToastService _toastService
@attribute [Authorize]

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="OnCancel"></div>
    <div class="modal-dialog modal-dialog-centered mw-650px" style="z-index: 1050">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="fw-bolder">@Title</h5>
                <div class="btn btn-icon btn-sm btn-active-icon-primary" @onclick="OnCancel">
                    <span class="svg-icon svg-icon-1">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
							<rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
							<rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
						</svg>
					</span>
                </div>
            </div>
            <div class="modal-body">
                <div class="scroll-y me-n7 pe-7">
                    <EditForm Model="editPromotion" OnValidSubmit="OnSubmit" class="form">
                        <DataAnnotationsValidator />
                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Tên đợt khuyến mãi</label>
                            <InputText @bind-Value="editPromotion.Name" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editPromotion.Name)" />
                            </div>
						</div>


                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Mô tả đợt khuyến mãi</label>
                            <InputText @bind-Value="editPromotion.Description" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editPromotion.Description)" />
                            </div>
						</div>

                        <div class="fv-row mb-7">
							<label class="fs-6 fw-bold mb-2 requied">Chọn loại hình khuyến mãi</label>
                            <InputSelect @bind-Value="editPromotion.PromotionType" class="form-control">
                                @foreach (var country in Enum.GetValues(typeof(PromotionType)))
                                {
                                    <option value="@country">@country</option>
                                }

                            </InputSelect>
						</div>
                        
                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Mã đợt khuyến mãi</label>
                            <InputText @bind-Value="editPromotion.Code" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editPromotion.Code)" />
                            </div>
						</div>

                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Ngày bắt đầu</label>
                            <InputDate @bind-Value="editPromotion.StartDate" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editPromotion.StartDate)" />
                            </div>
						</div>

                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Ngày kết thúc</label>
                            <InputDate @bind-Value="editPromotion.EndDate" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editPromotion.EndDate)" />
                            </div>
						</div>

                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Số lượng</label>
                            <InputNumber @bind-Value="editPromotion.Quantity" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editPromotion.Quantity)" />
                            </div>
						</div>

                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Tiền giảm</label>
                            <InputNumber @bind-Value="editPromotion.ReduceAmount" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editPromotion.ReduceAmount)" />
                            </div>
						</div>

                        <div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">% giảm</label>
                            <InputNumber @bind-Value="editPromotion.ReducePercent" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => editPromotion.ReducePercent)" />
                            </div>
						</div>
                        
                        <div class="card-footer p-2">
                            <button type="submit" class="btn btn-primary mr-2" onclick="@(()=>OnSubmit())">Cập nhật</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public string? PromotionId { get; set; }

    private List<PromotionType> types = new List<PromotionType>();
    private PromotionRequest editPromotion = null;

    protected async override Task OnInitializedAsync()
    {
        editPromotion = new PromotionRequest();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(PromotionId))
        {
            editPromotion = new PromotionRequest();
        }
        else
        {
            var responseP = await _promotionService.GetPromotionById(PromotionId);
            var vesselDB = responseP.Data;
            editPromotion.Name = vesselDB.Name;
            editPromotion.Description = vesselDB.Description;
            editPromotion.Code = vesselDB.Code;
            editPromotion.StartDate = vesselDB.StartDate;
            editPromotion.EndDate = vesselDB.EndDate;
            editPromotion.Status = vesselDB.Status;
            editPromotion.PromotionType = vesselDB.PromotionType;
            editPromotion.Quantity = vesselDB.Quantity;
            editPromotion.ReduceAmount = vesselDB.ReduceAmount;
            editPromotion.ReducePercent = vesselDB.ReducePercent;
            editPromotion.PromotionObject = vesselDB.PromotionObject;
        }
    }
}


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    private async Task OnCancel() => await BlazoredModal.CancelAsync();

    private MultipartFormDataContent content = new MultipartFormDataContent();
    private async Task OnSubmit()
    {
        try{
            ResponseLogin<Promotion> response = new ResponseLogin<Promotion>();
            
            if (string.IsNullOrEmpty(PromotionId))
            {
                response = await _promotionService.AddPromotion(editPromotion);
            }
            else
            {
                response = await _promotionService.Update(editPromotion);
            }
            if(response != null)
            {
                if(response.Result == 1)
                {
                    _toastService.ShowSuccess("Thêm thành công");
                    await BlazoredModal.CloseAsync(ModalResult.Ok(true));
                }
            }
        }
        catch(Exception ex)
        {
            _toastService.ShowError(ex.ToString());
        }
    }
}

