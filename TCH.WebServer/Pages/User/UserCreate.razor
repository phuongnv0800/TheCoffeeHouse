@using TCH.Data.Entities
@using TCH.Utilities.SubModels
@using TCH.ViewModel.RequestModel
@using TCH.WebServer.Services.Brands
@inject IToastService ToastService
@inject IUserApiClient UserApiClient
@inject IBrandService _brandService
@inject IJSRuntime JS
@attribute [Authorize]

@inject IToastService _toastService

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="OnCancel"></div>
    <div class="modal-dialog modal-dialog-centered mw-650px" style="z-index: 1050">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="fw-bolder">@Title</h5>
                <div class="btn btn-icon btn-sm btn-active-icon-primary" @onclick="OnCancel">
                    <span class="svg-icon svg-icon-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
                            <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
                        </svg>
                    </span>
                </div>
            </div>
            <div class="modal-body">
                <div class="scroll-y me-n7 pe-7">
                    @if(user != null && Branches != null){
                        <EditForm Model="user" OnValidSubmit="OnSubmit" class="form">
                        <DataAnnotationsValidator />
                        <div class="fv-row mb-7">
                            <label class="required fs-6 fw-bold mb-2" for="validationCustom01">
                                Tên tài khoản
                                <span class="text-danger">*</span>
                            </label>
                            <InputText type="text" class="form-control form-control-solid col-sm-6"
                                       id="validationCustom01" placeholder="Enter a username.."
                                       @bind-Value="user.UserName"></InputText>
                            <ValidationMessage For="()=> user.UserName"></ValidationMessage>

                        </div>
                        <div class="fv-row mb-7">
                            <label class="required fs-6 fw-bold mb-2" for="validationCustom01">
                                Chọn thông tin cửa hàng
                                <span class="text-danger">*</span>
                            </label>
                            <InputSelect type="text" class="form-control form-control-solid col-sm-6"
                                       id="validationCustom01" placeholder="Enter a username.."
                                       @bind-Value="user.branchID">
                                    @foreach(var branch in Branches)
                                    {
                                        <option value="@branch.ID">@branch.Name</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For="()=> user.UserName"></ValidationMessage>

                        </div>
                        <div class="row mb-7">
                            <div class="col-6">
                                <label class="required fs-6 fw-bold mb-2" for="Password">
                                    Mật khẩu
                                    <span class="text-danger">*</span>
                                </label>
                                <InputText class="form-control form-control-solid col-sm-6" type="password" placeholder="Password"
                                           id="Password" @bind-Value="@user.Password"></InputText>
                                <ValidationMessage For="()=> user.Password"></ValidationMessage>
                            </div>
                            <div class="col-6">
                                <label class="required fs-6 fw-bold mb-2" for="Password2">
                                    Nhập lại mật khẩu
                                    <span class="text-danger">*</span>
                                </label>
                                <InputText class="form-control form-control-solid col-sm-6" type="password" placeholder="Password"
                                           id="Password2" @bind-Value="@user.ConfirmPassword"></InputText>
                                <ValidationMessage For="()=> user.ConfirmPassword"></ValidationMessage>
                            </div>
                        </div>
                        <div class="fv-row mb-7">
                            <label class="required fs-6 fw-bold mb-2" for="Avatar">
                                Avatar
                                <span class="text-danger">*</span>
                            </label>
                            <InputFile OnChange="HandleFileSelection" class="form-file"></InputFile>
                        </div>
                        <div class="row mb-7">
                            <div class="col-6">
                                <label class="required fs-6 fw-bold mb-2">Tên</label>
                                <InputText @bind-Value="user.LastName" class="form-control form-control-solid col-sm-6" />
                                <div class="fv-plugins-message-container invalid-feedback">
                                    <ValidationMessage For="@(() => user.LastName)" />
                                </div>
                            </div>
                            <div class="col-6">
                                <label class="required fs-6 fw-bold mb-2">Họ</label>
                                <InputText @bind-Value="user.FirstName" class="form-control form-control-solid col-sm-6" />
                                <div class="fv-plugins-message-container invalid-feedback">
                                    <ValidationMessage For="@(() => user.FirstName)" />
                                </div>
                            </div>
                        </div>
                        <div class="row mb-7">
                            <div class="col-6">
                                <label class="fs-6 fw-bold mb-2">Điện thoại</label>
                                <InputText @bind-Value="user.PhoneNumber" class="form-control form-control-solid col-sm-6" />
                                <div class="fv-plugins-message-container invalid-feedback">
                                    <ValidationMessage For="@(() => user.PhoneNumber)" />
                                </div>
                            </div>
                            <div class="col-6">
                                <label class="fs-6 fw-bold mb-2">Email</label>
                                <InputText @bind-Value="user.Email" class="form-control form-control-solid col-sm-6" />
                                <div class="fv-plugins-message-container invalid-feedback">
                                    <ValidationMessage For="@(() => user.Email)" />
                                </div>
                            </div>
                        </div>
                        <div class="fv-row mb-7">
                            <label class="fs-6 fw-bold mb-2">Địa chỉ</label>
                            <InputText @bind-Value="user.Address" class="form-control form-control-solid col-sm-6" />
                            <div class="fv-plugins-message-container invalid-feedback">
                                <ValidationMessage For="@(() => user.Address)" />
                            </div>
                        </div>
                        <div class="row mb-7">
                            <div class="col-lg-6">
                                <label class="col-form-label">Giới tính:</label>
                                <div class="col-form-label">
                                    <div class="radio-inline">
                                        <InputRadioGroup @bind-Value="user.Gender">
                                            @foreach (var item in (Gender[])Enum.GetValues(typeof(Gender)))
                                            {
                                                <InputRadio Value="item" class="form-check-input" />
                                                <label class="form-check-label me-3">
                                                    @item
                                                </label>
                                            }
                                        </InputRadioGroup>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <label for="Dob">Ngày sinh</label>
                                <InputDate class="form-control" id="Dob" @bind-Value="@user.DateOfBirth" />
                            </div>
                        </div>
                        
                        <div class="card-footer p-2">
                            <button type="submit" class="btn btn-primary mr-2">Thêm mới</button>
                            <button class="btn btn-danger mr-2" @onclick="OnCancel">Đóng</button>
                        </div>
                    </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter]public string UserId { get; set; }

    private MultipartFormDataContent content = new ();
    private RegisterRequest user { set; get; }
    public List<Branch> Branches { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await _brandService.GetAllBranchs("");
        Branches = result.Data.Items;
        if (UserId == null)
        {
            user = new RegisterRequest();
            user.branchID = Branches.First().ID;
        }
        else
        {
            user = new RegisterRequest();
            var res = await UserApiClient.GetById(UserId);
            AppUser aUser = res.Data;
            user.Address = aUser.Address;
            user.branchID = aUser.BranchID;
            user.DateOfBirth = aUser.DateOfBirth;
            user.Email = aUser.Email;
            user.FirstName = aUser.FirstName;
            user.Gender = aUser.Gender;
            user.LastName = aUser.LastName;
            user.PhoneNumber = aUser.PhoneNumber;
            user.UserName = aUser.UserName;

        } 
        
    }
}


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    private async Task OnCancel() => await BlazoredModal.CancelAsync();

    private async Task OnSubmit()
    {
        MessageResult result = new MessageResult();
        if(user.FirstName != null)
        content.Add(new StringContent(user.FirstName), "firstName");
        if(user.LastName != null)
        content.Add(new StringContent(user.LastName), "lastName");
        content.Add(new StringContent(user.DateOfBirth.ToString()), "dateOfBirth");
        if(user.Email != null)
        content.Add(new StringContent(user.Email), "email");
        if(user.PhoneNumber != null)
        content.Add(new StringContent(user.PhoneNumber), "phoneNumber");
        content.Add(new StringContent(user.branchID), "branchID");
        content.Add(new StringContent(user.Address), "address");
        content.Add(new StringContent(user.Gender.ToString()), "gender");
        content.Add(new StringContent(user.UserName.ToString()), "userName");
        if(!string.IsNullOrEmpty(user.Password) && !string.IsNullOrEmpty(user.ConfirmPassword)){
            content.Add(new StringContent(user.Password.ToString()), "password");
            content.Add(new StringContent(user.ConfirmPassword.ToString()), "confirmPassword");
        }
        if(UserId == null)
             result = await UserApiClient.Register(content);
        else
        {
             result = await UserApiClient.Update(UserId, content);
        }
        if (result.Result == 1)
        {
            _toastService.ShowSuccess(result.Message);

            await BlazoredModal.CloseAsync(ModalResult.Ok(true));
        }
        else
        {
            _toastService.ShowError(result.Message);
        }
    }
    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        long maxFileSize = 512 * 512;
        try
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            content.Add(fileContent, "avatarFile", file.Name);

        }
        catch (Exception)
        {
            //Logger.LogError($"File: {file.Name} Error: {ex.Message}");
        }
    }
}